// Font family variables
$text-prose: 'open-sans', sans-serif;
$text-drama: 'montserrat', sans-serif;
$text-epic: 'parkside', cursive;


// Font weight variables
$fw-prose-light: 300;
$fw-prose-regular: 400;
$fw-prose-semibold: 600;
$fw-drama-regular: 400;
$fw-drama-bold: 700;
$fw-epic-regular: 400;


// Mixin for font properties
@mixin font($family, $weight, $style: normal) {
    font-family: $family;
    font-weight: $weight;
    font-style: $style;
}


// document styles
html {
    font-size: 62.5%;
}

body {
    @include font($text-prose, $fw-prose-light);
    font-size: 1.7rem;
    color: $tinta;
}

@media screen and (max-width: 768px) {
    html {
        font-size: 60.5%;
    }
}

@media screen and (max-width: 576px) {
    html {
        font-size: 58.5%;
    }
}




h1,
h2,
h3,
h4,
h5,
h6 {
    text-transform: uppercase;
}

h1 {
    @include font($text-drama, $fw-drama-bold);
    font-size: 4.5rem;
}

h2 {
    @include font($text-drama, $fw-drama-bold);
    font-size: 3.9rem;
}

h3 {
    @include font($text-drama, $fw-drama-bold);
    font-size: 2.7rem;
}

h4 {
    @include font($text-prose, $fw-prose-semibold);
    font-size: 2.7rem;
}

h5 {
    @include font($text-prose, $fw-prose-semibold);
    font-size: 2.4rem;
}

h6 {
    @include font($text-drama, $fw-drama-bold);
    font-size: 2.1rem;
}




.text-prose-light {
    @include font($text-prose, $fw-prose-light);
}

.text-prose-semibold {
    @include font($text-prose, $fw-prose-semibold);
}

.text-drama {
    @include font($text-drama, $fw-drama-regular);
}

.text-drama-bold {
    @include font($text-drama, $fw-drama-bold);
}

.text-epic {
    @include font($text-epic, $fw-epic-regular);
}

.text-slider-headline {
    @include font($text-epic, $fw-epic-regular);
    font-size: 9.0rem;
    position: relative;
    display: inline-block;
    text-transform: none;
    // text-decoration: underline;

    &::after {
        content: "";
        position: absolute;
        left: 0;
        right: 0;
        top: 100%; // Adjust this value as needed to control the distance of the border
        margin-top: -12px; // Moves the border up by ?px
        border-bottom: 2px solid #fff;
    }
}

.text-slider-tagline {
    @include font($text-drama, $fw-drama-bold);
    font-size: 2.7rem;
    text-transform: uppercase;
}

.text-card-headline {
    @include font($text-epic, $fw-epic-regular);
    font-size: 6.9rem;
    text-transform: none;
}

.text-card-tagline {
    @include font($text-drama, $fw-drama-bold);
    font-size: 2.4rem;
    text-transform: uppercase;
}





/*
███████  ██████  ███    ██ ████████      █████  ██     ██ ███████ ███████  ██████  ███    ███ ███████
██      ██    ██ ████   ██    ██        ██   ██ ██     ██ ██      ██      ██    ██ ████  ████ ██
█████   ██    ██ ██ ██  ██    ██        ███████ ██  █  ██ █████   ███████ ██    ██ ██ ████ ██ █████
██      ██    ██ ██  ██ ██    ██        ██   ██ ██ ███ ██ ██           ██ ██    ██ ██  ██  ██ ██
██       ██████  ██   ████    ██        ██   ██  ███ ███  ███████ ███████  ██████  ██      ██ ███████

*/

// Common styles for all icons
// The `%` symbol in SCSS is used to define a placeholder selector. Placeholder selectors are a feature of Sass. They allow you to write CSS rules that won't be output to the compiled CSS file unless they are explicitly extended using the `@extend` directive. This mechanism is useful for defining a set of common styles that can be shared across multiple classes without duplicating code. Placeholder selectors help in keeping your stylesheets DRY (Don't Repeat Yourself) by allowing you to write a common set of styles once and apply them to various selectors as needed.
%icon-common {
    color: #000;
    font-size: 2.7rem;
    margin-right: 10px;
    transition: color 0.4s, transform 0.4s;

    &:hover {
        color: #848484;
        transform: translateY(1px);
    }
}

// Apply common styles to all Font Awesome icons
// Target all elements whose class attribute starts with "fa-"
// and apply common icon styles to them by extending the %icon-common placeholder
[class^="fa-"] {
    @extend %icon-common;
}

// Specific styles for social icons in light mode
#social-icons-lightmode {

    .fa-brands,
    .fa-solid {
        color: #fff;

        &:hover {
            color: #f00;
        }
    }
}

// Special case for fa-expand
.fa-expand {
    font-size: 2.7rem;
}

// Social icons from the PHP function
// Defines a map named $social-icons. In SCSS, a map is a collection of key-value pairs, and it's a feature that allows for more organized and manageable stylesheets, especially when dealing with related sets of values. Maps are particularly useful for theming, configuration settings, or, as shown here, grouping related data.
$social-icons: (
    envelope: "fa-solid fa-envelope",
    facebook: "fa-brands fa-facebook-f",
    twitter: "fa-brands fa-twitter",
    instagram: "fa-brands fa-instagram",
    linkedin: "fa-brands fa-linkedin-in"
);

// Generate styles for each social icon
// Iterate over each key-value pair in the $social-icons map
@each $name, $class in $social-icons {

    // Dynamically generate a class selector based on the value of $class
    .#{$class} {
        // Extend the styles defined in the %icon-common placeholder to the dynamically generated class
        @extend %icon-common;
    }
}